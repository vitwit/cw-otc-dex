{"version":3,"file":"core.js","names":["createInputBuffer","createOutputBuffer","JSONRepairError","Caret","createStack","StackType","codeAsterisk","codeBackslash","codeCloseParenthesis","codeClosingBrace","codeClosingBracket","codeColon","codeComma","codeDot","codeDoubleQuote","codeLowercaseE","codeMinus","codeNewline","codeOpeningBrace","codeOpeningBracket","codeOpenParenthesis","codePlus","codeSemicolon","codeSlash","codeUppercaseE","isControlCharacter","isDelimiter","isDigit","isDoubleQuote","isDoubleQuoteLike","isHex","isQuote","isSingleQuote","isSingleQuoteLike","isSpecialWhitespace","isStartOfValue","isValidStringCharacter","isWhitespace","controlCharacters","escapeCharacters","b","f","n","r","t","jsonrepairCore","_ref","onData","bufferSize","chunkSize","input","output","write","i","iFlushed","stack","flushInputBuffer","flush","transform","chunk","push","currentLength","parse","close","parseWhitespaceAndSkipComments","type","object","caret","beforeKey","parseObjectKey","parseUnexpectedColon","parseRepairTrailingComma","parseRepairObjectEndOrComma","beforeValue","parseValue","parseRepairMissingObjectValue","afterValue","parseObjectComma","parseObjectEnd","array","parseRepairArrayEnd","parseArrayComma","parseArrayEnd","parseRepairMissingComma","ndJson","parseRepairNdJsonEnd","functionCall","parseFunctionCallEnd","root","parseUnexpectedEnd","parseRootEnd","parseObjectStart","parseArrayStart","parseString","parseNumber","parseKeywords","parseRepairUnquotedString","parseCharacter","update","unquotedStringEnd","findNextDelimiter","symbol","substring","skipCharacter","JSON","stringify","charCodeAt","endsWithIgnoringWhitespace","stripLastOccurrence","throwObjectKeyExpected","isEnd","throwUnexpectedEnd","throwUnexpectedCharacter","parsedKey","parseUnquotedKey","truncatedText","charAt","insertBeforeLastWhitespace","throwColonExpected","pop","parsedComma","unshift","start","changed","parseWhitespace","parseComment","whitespace","normal","length","atEndOfBlockComment","code","skipEscapeCharacter","stopAtDelimiter","arguments","undefined","iBefore","oBefore","skipEscapeChars","isEndQuote","isEndOfString","char","escapeChar","j","throwInvalidUnicodeCharacter","throwInvalidCharacter","hasEndQuote","isAtEnd","nextIsDelimiter","remove","parseConcatenatedString","parsed","parsedStr","expectDigitOrRepair","num","hasInvalidLeadingZero","test","concat","parseKeyword","name","value","end","expectDigit","numSoFar","got","chars"],"sources":["../../../src/streaming/core.ts"],"sourcesContent":["import { createInputBuffer } from './buffer/InputBuffer.js'\nimport { createOutputBuffer } from './buffer/OutputBuffer.js'\nimport { JSONRepairError } from '../utils/JSONRepairError.js'\nimport { Caret, createStack, StackType } from './stack.js'\nimport {\n  codeAsterisk,\n  codeBackslash,\n  codeCloseParenthesis,\n  codeClosingBrace,\n  codeClosingBracket,\n  codeColon,\n  codeComma,\n  codeDot,\n  codeDoubleQuote,\n  codeLowercaseE,\n  codeMinus,\n  codeNewline,\n  codeOpeningBrace,\n  codeOpeningBracket,\n  codeOpenParenthesis,\n  codePlus,\n  codeSemicolon,\n  codeSlash,\n  codeUppercaseE,\n  isControlCharacter,\n  isDelimiter,\n  isDigit,\n  isDoubleQuote,\n  isDoubleQuoteLike,\n  isHex,\n  isQuote,\n  isSingleQuote,\n  isSingleQuoteLike,\n  isSpecialWhitespace,\n  isStartOfValue,\n  isValidStringCharacter,\n  isWhitespace\n} from '../utils/stringUtils.js'\n\nconst controlCharacters: { [key: string]: string } = {\n  '\\b': '\\\\b',\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t'\n}\n\n// map with all escape characters\nconst escapeCharacters: { [key: string]: string } = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\nexport interface JsonRepairCoreOptions {\n  onData: (chunk: string) => void\n  chunkSize?: number\n  bufferSize?: number\n}\n\nexport interface JsonRepairCore {\n  transform: (chunk: string) => void\n  flush: () => void\n}\n\nexport function jsonrepairCore({\n  onData,\n  bufferSize = 65536,\n  chunkSize = 65536\n}: JsonRepairCoreOptions): JsonRepairCore {\n  const input = createInputBuffer()\n\n  const output = createOutputBuffer({\n    write: onData,\n    bufferSize,\n    chunkSize\n  })\n\n  let i = 0\n  let iFlushed = 0\n  const stack = createStack()\n\n  function flushInputBuffer() {\n    while (iFlushed < i - bufferSize - chunkSize) {\n      iFlushed += chunkSize\n      input.flush(iFlushed)\n    }\n  }\n\n  function transform(chunk: string) {\n    input.push(chunk)\n\n    while (i < input.currentLength() - bufferSize && parse()) {\n      // loop until there is nothing more to process\n    }\n\n    flushInputBuffer()\n  }\n\n  function flush() {\n    input.close()\n\n    while (parse()) {\n      // loop until there is nothing more to process\n    }\n\n    output.flush()\n  }\n\n  function parse(): boolean {\n    parseWhitespaceAndSkipComments()\n\n    switch (stack.type) {\n      case StackType.object: {\n        switch (stack.caret) {\n          case Caret.beforeKey:\n            return (\n              parseObjectKey() ||\n              parseUnexpectedColon() ||\n              parseRepairTrailingComma() ||\n              parseRepairObjectEndOrComma()\n            )\n          case Caret.beforeValue:\n            return parseValue() || parseRepairMissingObjectValue()\n          case Caret.afterValue:\n            return parseObjectComma() || parseObjectEnd() || parseRepairObjectEndOrComma()\n          default:\n            return false\n        }\n      }\n\n      case StackType.array: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue() || parseRepairTrailingComma() || parseRepairArrayEnd()\n          case Caret.afterValue:\n            return (\n              parseArrayComma() ||\n              parseArrayEnd() ||\n              parseRepairMissingComma() ||\n              parseRepairArrayEnd()\n            )\n          default:\n            return false\n        }\n      }\n\n      case StackType.ndJson: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue() || parseRepairTrailingComma()\n          case Caret.afterValue:\n            return parseArrayComma() || parseRepairMissingComma() || parseRepairNdJsonEnd()\n          default:\n            return false\n        }\n      }\n\n      case StackType.functionCall: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue()\n          case Caret.afterValue:\n            return parseFunctionCallEnd()\n          default:\n            return false\n        }\n      }\n\n      case StackType.root: {\n        switch (stack.caret) {\n          case Caret.beforeValue:\n            return parseValue() || parseUnexpectedEnd()\n          case Caret.afterValue:\n            return parseRootEnd()\n          default:\n            return false\n        }\n      }\n\n      default:\n        return false\n    }\n  }\n\n  function parseValue(): boolean {\n    return (\n      parseObjectStart() ||\n      parseArrayStart() ||\n      parseString() ||\n      parseNumber() ||\n      parseKeywords() ||\n      parseRepairUnquotedString()\n    )\n  }\n\n  function parseObjectStart(): boolean {\n    if (parseCharacter(codeOpeningBrace)) {\n      parseWhitespaceAndSkipComments()\n      if (parseCharacter(codeClosingBrace)) {\n        return stack.update(Caret.afterValue)\n      }\n\n      return stack.push(StackType.object, Caret.beforeKey)\n    }\n\n    return false\n  }\n\n  function parseArrayStart(): boolean {\n    if (parseCharacter(codeOpeningBracket)) {\n      parseWhitespaceAndSkipComments()\n      if (parseCharacter(codeClosingBracket)) {\n        return stack.update(Caret.afterValue)\n      }\n\n      return stack.push(StackType.array, Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseRepairUnquotedString(): boolean {\n    const unquotedStringEnd = findNextDelimiter()\n    if (unquotedStringEnd !== null) {\n      const symbol = input.substring(i, unquotedStringEnd)\n      i = unquotedStringEnd\n\n      if (skipCharacter(codeOpenParenthesis)) {\n        // A MongoDB function call like NumberLong(\"2\")\n        // Or a JSONP function call like callback({...});\n        // we strip the function call\n\n        return stack.push(StackType.functionCall, Caret.beforeValue)\n      }\n\n      output.push(symbol === 'undefined' ? 'null' : JSON.stringify(symbol))\n\n      if (input.charCodeAt(i) === codeDoubleQuote) {\n        // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n        i++\n      }\n\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseRepairMissingObjectValue(): boolean {\n    // repair missing object value\n    output.push('null')\n    return stack.update(Caret.afterValue)\n  }\n\n  function parseRepairTrailingComma(): boolean {\n    // repair trailing comma\n    if (output.endsWithIgnoringWhitespace(',')) {\n      output.stripLastOccurrence(',')\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseUnexpectedColon(): boolean {\n    if (input.charCodeAt(i) === codeColon) {\n      throwObjectKeyExpected()\n    }\n\n    return false\n  }\n\n  function parseUnexpectedEnd(): boolean {\n    if (input.isEnd(i)) {\n      throwUnexpectedEnd()\n    } else {\n      throwUnexpectedCharacter()\n    }\n\n    return false\n  }\n\n  function parseObjectKey(): boolean {\n    const parsedKey = parseString() || parseUnquotedKey()\n    if (parsedKey) {\n      parseWhitespaceAndSkipComments()\n\n      if (parseCharacter(codeColon)) {\n        // expect a value after the :\n        return stack.update(Caret.beforeValue)\n      }\n\n      const truncatedText = input.isEnd(i)\n      if (isStartOfValue(input.charAt(i)) || truncatedText) {\n        // repair missing colon\n        output.insertBeforeLastWhitespace(':')\n        return stack.update(Caret.beforeValue)\n      }\n\n      throwColonExpected()\n    }\n\n    return false\n  }\n\n  function parseObjectComma(): boolean {\n    if (parseCharacter(codeComma)) {\n      return stack.update(Caret.beforeKey)\n    }\n\n    return false\n  }\n\n  function parseObjectEnd(): boolean {\n    if (parseCharacter(codeClosingBrace)) {\n      return stack.pop()\n    }\n\n    return false\n  }\n\n  function parseRepairObjectEndOrComma(): true {\n    // repair missing object end and trailing comma\n    if (input.charAt(i) === '{') {\n      output.stripLastOccurrence(',')\n      output.insertBeforeLastWhitespace('}')\n      return stack.pop()\n    }\n\n    // repair missing comma\n    if (!input.isEnd(i) && isStartOfValue(input.charAt(i))) {\n      output.insertBeforeLastWhitespace(',')\n      return stack.update(Caret.beforeKey)\n    }\n\n    // repair missing closing brace\n    output.insertBeforeLastWhitespace('}')\n    return stack.pop()\n  }\n\n  function parseArrayComma(): boolean {\n    if (parseCharacter(codeComma)) {\n      return stack.update(Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseArrayEnd(): boolean {\n    if (parseCharacter(codeClosingBracket)) {\n      return stack.pop()\n    }\n\n    return false\n  }\n\n  function parseRepairMissingComma(): boolean {\n    // repair missing comma\n    if (!input.isEnd(i) && isStartOfValue(input.charAt(i))) {\n      output.insertBeforeLastWhitespace(',')\n      return stack.update(Caret.beforeValue)\n    }\n\n    return false\n  }\n\n  function parseRepairArrayEnd(): true {\n    // repair missing closing bracket\n    output.insertBeforeLastWhitespace(']')\n    return stack.pop()\n  }\n\n  function parseRepairNdJsonEnd(): boolean {\n    if (input.isEnd(i)) {\n      output.push('\\n]')\n      return stack.pop()\n    } else {\n      throwUnexpectedEnd()\n      return false // just to make TS happy\n    }\n  }\n\n  function parseFunctionCallEnd(): true {\n    if (skipCharacter(codeCloseParenthesis)) {\n      skipCharacter(codeSemicolon)\n    }\n\n    return stack.pop()\n  }\n\n  function parseRootEnd(): boolean {\n    const parsedComma = parseCharacter(codeComma)\n    parseWhitespaceAndSkipComments()\n\n    if (\n      isStartOfValue(input.charAt(i)) &&\n      (output.endsWithIgnoringWhitespace(',') || output.endsWithIgnoringWhitespace('\\n'))\n    ) {\n      // start of a new value after end of the root level object: looks like\n      // newline delimited JSON -> turn into a root level array\n      if (!parsedComma) {\n        // repair missing comma\n        output.insertBeforeLastWhitespace(',')\n      }\n\n      output.unshift('[\\n')\n\n      return stack.push(StackType.ndJson, Caret.beforeValue)\n    }\n\n    if (parsedComma) {\n      // repair: remove trailing comma\n      output.stripLastOccurrence(',')\n\n      return stack.update(Caret.afterValue)\n    }\n\n    // repair redundant end braces and brackets\n    while (input.charCodeAt(i) === codeClosingBrace || input.charCodeAt(i) === codeClosingBracket) {\n      i++\n      parseWhitespaceAndSkipComments()\n    }\n\n    if (!input.isEnd(i)) {\n      throwUnexpectedCharacter()\n    }\n\n    return false\n  }\n\n  function parseWhitespaceAndSkipComments(): boolean {\n    const start = i\n\n    let changed = parseWhitespace()\n    do {\n      changed = parseComment()\n      if (changed) {\n        changed = parseWhitespace()\n      }\n    } while (changed)\n\n    return i > start\n  }\n\n  function parseWhitespace(): boolean {\n    let whitespace = ''\n    let normal: boolean\n    while (\n      (normal = isWhitespace(input.charCodeAt(i))) ||\n      isSpecialWhitespace(input.charCodeAt(i))\n    ) {\n      if (normal) {\n        whitespace += input.charAt(i)\n      } else {\n        // repair special whitespace\n        whitespace += ' '\n      }\n\n      i++\n    }\n\n    if (whitespace.length > 0) {\n      output.push(whitespace)\n      return true\n    }\n\n    return false\n  }\n\n  function parseComment(): boolean {\n    // find a block comment '/* ... */'\n    if (input.charCodeAt(i) === codeSlash && input.charCodeAt(i + 1) === codeAsterisk) {\n      // repair block comment by skipping it\n      while (!input.isEnd(i) && !atEndOfBlockComment(i)) {\n        i++\n      }\n      i += 2\n\n      return true\n    }\n\n    // find a line comment '// ...'\n    if (input.charCodeAt(i) === codeSlash && input.charCodeAt(i + 1) === codeSlash) {\n      // repair line comment by skipping it\n      while (!input.isEnd(i) && input.charCodeAt(i) !== codeNewline) {\n        i++\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  function parseCharacter(code: number): boolean {\n    if (input.charCodeAt(i) === code) {\n      output.push(input.charAt(i))\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipCharacter(code: number): boolean {\n    if (input.charCodeAt(i) === code) {\n      i++\n      return true\n    }\n\n    return false\n  }\n\n  function skipEscapeCharacter(): boolean {\n    return skipCharacter(codeBackslash)\n  }\n\n  /**\n   * Parse a string enclosed by double quotes \"...\". Can contain escaped quotes\n   * Repair strings enclosed in single quotes or special quotes\n   * Repair an escaped string\n   *\n   * The function can run in two stages:\n   * - First, it assumes the string has a valid end quote\n   * - If it turns out that the string does not have a valid end quote followed\n   *   by a delimiter (which should be the case), the function runs again in a\n   *   more conservative way, stopping the string at the first next delimiter\n   *   and fixing the string by inserting a quote there.\n   */\n  function parseString(stopAtDelimiter = false): boolean {\n    // we may need to revert\n    const iBefore = i\n    const oBefore = output.length()\n\n    let skipEscapeChars = input.charCodeAt(i) === codeBackslash\n    if (skipEscapeChars) {\n      // repair: remove the first escape character\n      i++\n      skipEscapeChars = true\n    }\n\n    if (isQuote(input.charCodeAt(i))) {\n      // double quotes are correct JSON,\n      // single quotes come from JavaScript for example, we assume it will have a correct single end quote too\n      // otherwise, we will match any double-quote-like start with a double-quote-like end,\n      // or any single-quote-like start with a single-quote-like end\n      const isEndQuote = isDoubleQuote(input.charCodeAt(i))\n        ? isDoubleQuote\n        : isSingleQuote(input.charCodeAt(i))\n          ? isSingleQuote // eslint-disable-line indent\n          : isSingleQuoteLike(input.charCodeAt(i)) // eslint-disable-line indent\n            ? isSingleQuoteLike // eslint-disable-line indent\n            : isDoubleQuoteLike // eslint-disable-line indent\n\n      output.push('\"')\n      i++\n\n      const isEndOfString = stopAtDelimiter\n        ? (i: number) => isDelimiter(input.charAt(i))\n        : (i: number) => isEndQuote(input.charCodeAt(i))\n\n      while (!input.isEnd(i) && !isEndOfString(i)) {\n        if (input.charCodeAt(i) === codeBackslash) {\n          const char = input.charAt(i + 1)\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            output.push(input.substring(i, i + 2))\n            i += 2\n          } else if (char === 'u') {\n            let j = 2\n            while (j < 6 && isHex(input.charCodeAt(i + j))) {\n              j++\n            }\n\n            if (j === 6) {\n              output.push(input.substring(i, i + 6))\n              i += 6\n            } else if (input.isEnd(i + j)) {\n              // repair invalid or truncated unicode char at the end of the text\n              // by removing the unicode char and ending the string here\n              i += j\n            } else {\n              throwInvalidUnicodeCharacter()\n            }\n          } else {\n            // repair invalid escape character: remove it\n            output.push(char)\n            i += 2\n          }\n        } else {\n          const char = input.charAt(i)\n          const code = char.charCodeAt(0)\n\n          if (code === codeDoubleQuote && input.charCodeAt(i - 1) !== codeBackslash) {\n            // repair unescaped double quote\n            output.push('\\\\' + char)\n            i++\n          } else if (isControlCharacter(code)) {\n            // unescaped control character\n            output.push(controlCharacters[char])\n            i++\n          } else {\n            if (!isValidStringCharacter(code)) {\n              throwInvalidCharacter(char)\n            }\n            output.push(char)\n            i++\n          }\n        }\n\n        if (skipEscapeChars) {\n          // repair: skipped escape character (nothing to do)\n          skipEscapeCharacter()\n        }\n      }\n\n      const hasEndQuote = isQuote(input.charCodeAt(i))\n      if (hasEndQuote) {\n        output.push('\"')\n        i++\n      } else {\n        // repair missing quote\n        output.insertBeforeLastWhitespace('\"')\n      }\n\n      parseWhitespaceAndSkipComments()\n\n      // See whether we have:\n      // (a) An end quote which is not followed by a valid delimiter\n      // (b) No end quote and reached the end of the input\n      // If so, revert parsing this string and try again, running in a more\n      // conservative mode, stopping at the first next delimiter\n      const isAtEnd = input.isEnd(i)\n      const nextIsDelimiter = isDelimiter(input.charAt(i))\n      if (\n        !stopAtDelimiter &&\n        ((hasEndQuote && !isAtEnd && !nextIsDelimiter) || (!hasEndQuote && isAtEnd))\n      ) {\n        i = iBefore\n        output.remove(oBefore)\n        return parseString(true)\n      }\n\n      parseConcatenatedString()\n\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  /**\n   * Repair concatenated strings like \"hello\" + \"world\", change this into \"helloworld\"\n   */\n  function parseConcatenatedString(): boolean {\n    let parsed = false\n\n    parseWhitespaceAndSkipComments()\n    while (input.charCodeAt(i) === codePlus) {\n      parsed = true\n      i++\n      parseWhitespaceAndSkipComments()\n\n      // repair: remove the end quote of the first string\n      output.stripLastOccurrence('\"', true)\n      const start = output.length()\n      const parsedStr = parseString()\n      if (parsedStr) {\n        // repair: remove the start quote of the second string\n        output.remove(start, start + 1)\n      } else {\n        // repair: remove the + because it is not followed by a string\n        output.insertBeforeLastWhitespace('\"')\n      }\n    }\n\n    return parsed\n  }\n\n  /**\n   * Parse a number like 2.4 or 2.4e6\n   */\n  function parseNumber(): boolean {\n    const start = i\n    if (input.charCodeAt(i) === codeMinus) {\n      i++\n      if (expectDigitOrRepair(start)) {\n        return stack.update(Caret.afterValue)\n      }\n    }\n\n    // Note that in JSON leading zeros like \"00789\" are not allowed.\n    // We will allow all leading zeros here though and at the end of parseNumber\n    // check against trailing zeros and repair that if needed.\n    // Leading zeros can have meaning, so we should not clear them.\n    while (isDigit(input.charCodeAt(i))) {\n      i++\n    }\n\n    if (input.charCodeAt(i) === codeDot) {\n      i++\n      if (expectDigitOrRepair(start)) {\n        return stack.update(Caret.afterValue)\n      }\n      while (isDigit(input.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (input.charCodeAt(i) === codeLowercaseE || input.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (input.charCodeAt(i) === codeMinus || input.charCodeAt(i) === codePlus) {\n        i++\n      }\n      if (expectDigitOrRepair(start)) {\n        return stack.update(Caret.afterValue)\n      }\n      while (isDigit(input.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (i > start) {\n      // repair a number with leading zeros like \"00789\"\n      const num = input.substring(start, i)\n      const hasInvalidLeadingZero = /^0\\d/.test(num)\n\n      output.push(hasInvalidLeadingZero ? `\"${num}\"` : num)\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  /**\n   * Parse keywords true, false, null\n   * Repair Python keywords True, False, None\n   */\n  function parseKeywords(): boolean {\n    return (\n      parseKeyword('true', 'true') ||\n      parseKeyword('false', 'false') ||\n      parseKeyword('null', 'null') ||\n      // repair Python keywords True, False, None\n      parseKeyword('True', 'true') ||\n      parseKeyword('False', 'false') ||\n      parseKeyword('None', 'null')\n    )\n  }\n\n  function parseKeyword(name: string, value: string): boolean {\n    if (input.substring(i, i + name.length) === name) {\n      output.push(value)\n      i += name.length\n      return stack.update(Caret.afterValue)\n    }\n\n    return false\n  }\n\n  function parseUnquotedKey(): boolean {\n    let end = findNextDelimiter()\n\n    if (end !== null) {\n      // first, go back to prevent getting trailing whitespaces in the string\n      while (isWhitespace(input.charCodeAt(end - 1)) && end > i) {\n        end--\n      }\n\n      const symbol = input.substring(i, end)\n      output.push(JSON.stringify(symbol))\n      i = end\n\n      if (input.charCodeAt(i) === codeDoubleQuote) {\n        // we had a missing start quote, but now we encountered the end quote, so we can skip that one\n        i++\n      }\n\n      return stack.update(Caret.afterValue) // we do not have a state Caret.afterKey, therefore we use afterValue here\n    }\n\n    return false\n  }\n\n  function findNextDelimiter(): number | null {\n    // note that the symbol can end with whitespaces: we stop at the next delimiter\n    let j = i\n    while (!input.isEnd(j) && !isDelimiter(input.charAt(j))) {\n      j++\n    }\n\n    return j > i ? j : null\n  }\n\n  function expectDigit(start: number) {\n    if (!isDigit(input.charCodeAt(i))) {\n      const numSoFar = input.substring(start, i)\n      throw new JSONRepairError(`Invalid number '${numSoFar}', expecting a digit ${got()}`, i)\n    }\n  }\n\n  function expectDigitOrRepair(start: number) {\n    if (input.isEnd(i)) {\n      // repair numbers cut off at the end\n      // this will only be called when we end after a '.', '-', or 'e' and does not\n      // change the number more than it needs to make it valid JSON\n      output.push(input.substring(start, i) + '0')\n      return true\n    } else {\n      expectDigit(start)\n      return false\n    }\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new JSONRepairError('Invalid character ' + JSON.stringify(char), i)\n  }\n\n  function throwUnexpectedCharacter() {\n    throw new JSONRepairError('Unexpected character ' + JSON.stringify(input.charAt(i)), i)\n  }\n\n  function throwUnexpectedEnd() {\n    throw new JSONRepairError('Unexpected end of json string', i)\n  }\n\n  function throwObjectKeyExpected() {\n    throw new JSONRepairError('Object key expected', i)\n  }\n\n  function throwColonExpected() {\n    throw new JSONRepairError('Colon expected', i)\n  }\n\n  function throwInvalidUnicodeCharacter() {\n    const chars = input.substring(i, i + 6)\n    throw new JSONRepairError(`Invalid unicode character \"${chars}\"`, i)\n  }\n\n  function got(): string {\n    const char = input.charAt(i)\n    return char ? `but got '${char}'` : 'but reached end of input'\n  }\n\n  function atEndOfBlockComment(i: number) {\n    return input.charAt(i) === '*' && input.charAt(i + 1) === '/'\n  }\n\n  return {\n    transform,\n    flush\n  }\n}\n"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,yBAAyB;AAC3D,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,eAAe,QAAQ,6BAA6B;AAC7D,SAASC,KAAK,EAAEC,WAAW,EAAEC,SAAS,QAAQ,YAAY;AAC1D,SACEC,YAAY,EACZC,aAAa,EACbC,oBAAoB,EACpBC,gBAAgB,EAChBC,kBAAkB,EAClBC,SAAS,EACTC,SAAS,EACTC,OAAO,EACPC,eAAe,EACfC,cAAc,EACdC,SAAS,EACTC,WAAW,EACXC,gBAAgB,EAChBC,kBAAkB,EAClBC,mBAAmB,EACnBC,QAAQ,EACRC,aAAa,EACbC,SAAS,EACTC,cAAc,EACdC,kBAAkB,EAClBC,WAAW,EACXC,OAAO,EACPC,aAAa,EACbC,iBAAiB,EACjBC,KAAK,EACLC,OAAO,EACPC,aAAa,EACbC,iBAAiB,EACjBC,mBAAmB,EACnBC,cAAc,EACdC,sBAAsB,EACtBC,YAAY,QACP,yBAAyB;AAEhC,MAAMC,iBAA4C,GAAG;EACnD,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE,KAAK;EACX,IAAI,EAAE;AACR,CAAC;;AAED;AACA,MAAMC,gBAA2C,GAAG;EAClD,GAAG,EAAE,GAAG;EACR,IAAI,EAAE,IAAI;EACV,GAAG,EAAE,GAAG;EACRC,CAAC,EAAE,IAAI;EACPC,CAAC,EAAE,IAAI;EACPC,CAAC,EAAE,IAAI;EACPC,CAAC,EAAE,IAAI;EACPC,CAAC,EAAE;EACH;AACF,CAAC;AAaD,OAAO,SAASC,cAAcA,CAAAC,IAAA,EAIY;EAAA,IAJX;IAC7BC,MAAM;IACNC,UAAU,GAAG,KAAK;IAClBC,SAAS,GAAG;EACS,CAAC,GAAAH,IAAA;EACtB,MAAMI,KAAK,GAAGlD,iBAAiB,CAAC,CAAC;EAEjC,MAAMmD,MAAM,GAAGlD,kBAAkB,CAAC;IAChCmD,KAAK,EAAEL,MAAM;IACbC,UAAU;IACVC;EACF,CAAC,CAAC;EAEF,IAAII,CAAC,GAAG,CAAC;EACT,IAAIC,QAAQ,GAAG,CAAC;EAChB,MAAMC,KAAK,GAAGnD,WAAW,CAAC,CAAC;EAE3B,SAASoD,gBAAgBA,CAAA,EAAG;IAC1B,OAAOF,QAAQ,GAAGD,CAAC,GAAGL,UAAU,GAAGC,SAAS,EAAE;MAC5CK,QAAQ,IAAIL,SAAS;MACrBC,KAAK,CAACO,KAAK,CAACH,QAAQ,CAAC;IACvB;EACF;EAEA,SAASI,SAASA,CAACC,KAAa,EAAE;IAChCT,KAAK,CAACU,IAAI,CAACD,KAAK,CAAC;IAEjB,OAAON,CAAC,GAAGH,KAAK,CAACW,aAAa,CAAC,CAAC,GAAGb,UAAU,IAAIc,KAAK,CAAC,CAAC,EAAE;MACxD;IAAA;IAGFN,gBAAgB,CAAC,CAAC;EACpB;EAEA,SAASC,KAAKA,CAAA,EAAG;IACfP,KAAK,CAACa,KAAK,CAAC,CAAC;IAEb,OAAOD,KAAK,CAAC,CAAC,EAAE;MACd;IAAA;IAGFX,MAAM,CAACM,KAAK,CAAC,CAAC;EAChB;EAEA,SAASK,KAAKA,CAAA,EAAY;IACxBE,8BAA8B,CAAC,CAAC;IAEhC,QAAQT,KAAK,CAACU,IAAI;MAChB,KAAK5D,SAAS,CAAC6D,MAAM;QAAE;UACrB,QAAQX,KAAK,CAACY,KAAK;YACjB,KAAKhE,KAAK,CAACiE,SAAS;cAClB,OACEC,cAAc,CAAC,CAAC,IAChBC,oBAAoB,CAAC,CAAC,IACtBC,wBAAwB,CAAC,CAAC,IAC1BC,2BAA2B,CAAC,CAAC;YAEjC,KAAKrE,KAAK,CAACsE,WAAW;cACpB,OAAOC,UAAU,CAAC,CAAC,IAAIC,6BAA6B,CAAC,CAAC;YACxD,KAAKxE,KAAK,CAACyE,UAAU;cACnB,OAAOC,gBAAgB,CAAC,CAAC,IAAIC,cAAc,CAAC,CAAC,IAAIN,2BAA2B,CAAC,CAAC;YAChF;cACE,OAAO,KAAK;UAChB;QACF;MAEA,KAAKnE,SAAS,CAAC0E,KAAK;QAAE;UACpB,QAAQxB,KAAK,CAACY,KAAK;YACjB,KAAKhE,KAAK,CAACsE,WAAW;cACpB,OAAOC,UAAU,CAAC,CAAC,IAAIH,wBAAwB,CAAC,CAAC,IAAIS,mBAAmB,CAAC,CAAC;YAC5E,KAAK7E,KAAK,CAACyE,UAAU;cACnB,OACEK,eAAe,CAAC,CAAC,IACjBC,aAAa,CAAC,CAAC,IACfC,uBAAuB,CAAC,CAAC,IACzBH,mBAAmB,CAAC,CAAC;YAEzB;cACE,OAAO,KAAK;UAChB;QACF;MAEA,KAAK3E,SAAS,CAAC+E,MAAM;QAAE;UACrB,QAAQ7B,KAAK,CAACY,KAAK;YACjB,KAAKhE,KAAK,CAACsE,WAAW;cACpB,OAAOC,UAAU,CAAC,CAAC,IAAIH,wBAAwB,CAAC,CAAC;YACnD,KAAKpE,KAAK,CAACyE,UAAU;cACnB,OAAOK,eAAe,CAAC,CAAC,IAAIE,uBAAuB,CAAC,CAAC,IAAIE,oBAAoB,CAAC,CAAC;YACjF;cACE,OAAO,KAAK;UAChB;QACF;MAEA,KAAKhF,SAAS,CAACiF,YAAY;QAAE;UAC3B,QAAQ/B,KAAK,CAACY,KAAK;YACjB,KAAKhE,KAAK,CAACsE,WAAW;cACpB,OAAOC,UAAU,CAAC,CAAC;YACrB,KAAKvE,KAAK,CAACyE,UAAU;cACnB,OAAOW,oBAAoB,CAAC,CAAC;YAC/B;cACE,OAAO,KAAK;UAChB;QACF;MAEA,KAAKlF,SAAS,CAACmF,IAAI;QAAE;UACnB,QAAQjC,KAAK,CAACY,KAAK;YACjB,KAAKhE,KAAK,CAACsE,WAAW;cACpB,OAAOC,UAAU,CAAC,CAAC,IAAIe,kBAAkB,CAAC,CAAC;YAC7C,KAAKtF,KAAK,CAACyE,UAAU;cACnB,OAAOc,YAAY,CAAC,CAAC;YACvB;cACE,OAAO,KAAK;UAChB;QACF;MAEA;QACE,OAAO,KAAK;IAChB;EACF;EAEA,SAAShB,UAAUA,CAAA,EAAY;IAC7B,OACEiB,gBAAgB,CAAC,CAAC,IAClBC,eAAe,CAAC,CAAC,IACjBC,WAAW,CAAC,CAAC,IACbC,WAAW,CAAC,CAAC,IACbC,aAAa,CAAC,CAAC,IACfC,yBAAyB,CAAC,CAAC;EAE/B;EAEA,SAASL,gBAAgBA,CAAA,EAAY;IACnC,IAAIM,cAAc,CAAC/E,gBAAgB,CAAC,EAAE;MACpC8C,8BAA8B,CAAC,CAAC;MAChC,IAAIiC,cAAc,CAACxF,gBAAgB,CAAC,EAAE;QACpC,OAAO8C,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;MACvC;MAEA,OAAOrB,KAAK,CAACK,IAAI,CAACvD,SAAS,CAAC6D,MAAM,EAAE/D,KAAK,CAACiE,SAAS,CAAC;IACtD;IAEA,OAAO,KAAK;EACd;EAEA,SAASwB,eAAeA,CAAA,EAAY;IAClC,IAAIK,cAAc,CAAC9E,kBAAkB,CAAC,EAAE;MACtC6C,8BAA8B,CAAC,CAAC;MAChC,IAAIiC,cAAc,CAACvF,kBAAkB,CAAC,EAAE;QACtC,OAAO6C,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;MACvC;MAEA,OAAOrB,KAAK,CAACK,IAAI,CAACvD,SAAS,CAAC0E,KAAK,EAAE5E,KAAK,CAACsE,WAAW,CAAC;IACvD;IAEA,OAAO,KAAK;EACd;EAEA,SAASuB,yBAAyBA,CAAA,EAAY;IAC5C,MAAMG,iBAAiB,GAAGC,iBAAiB,CAAC,CAAC;IAC7C,IAAID,iBAAiB,KAAK,IAAI,EAAE;MAC9B,MAAME,MAAM,GAAGnD,KAAK,CAACoD,SAAS,CAACjD,CAAC,EAAE8C,iBAAiB,CAAC;MACpD9C,CAAC,GAAG8C,iBAAiB;MAErB,IAAII,aAAa,CAACnF,mBAAmB,CAAC,EAAE;QACtC;QACA;QACA;;QAEA,OAAOmC,KAAK,CAACK,IAAI,CAACvD,SAAS,CAACiF,YAAY,EAAEnF,KAAK,CAACsE,WAAW,CAAC;MAC9D;MAEAtB,MAAM,CAACS,IAAI,CAACyC,MAAM,KAAK,WAAW,GAAG,MAAM,GAAGG,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC,CAAC;MAErE,IAAInD,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAKvC,eAAe,EAAE;QAC3C;QACAuC,CAAC,EAAE;MACL;MAEA,OAAOE,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;IACvC;IAEA,OAAO,KAAK;EACd;EAEA,SAASD,6BAA6BA,CAAA,EAAY;IAChD;IACAxB,MAAM,CAACS,IAAI,CAAC,MAAM,CAAC;IACnB,OAAOL,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;EACvC;EAEA,SAASL,wBAAwBA,CAAA,EAAY;IAC3C;IACA,IAAIpB,MAAM,CAACwD,0BAA0B,CAAC,GAAG,CAAC,EAAE;MAC1CxD,MAAM,CAACyD,mBAAmB,CAAC,GAAG,CAAC;MAC/B,OAAOrD,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;IACvC;IAEA,OAAO,KAAK;EACd;EAEA,SAASN,oBAAoBA,CAAA,EAAY;IACvC,IAAIpB,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAK1C,SAAS,EAAE;MACrCkG,sBAAsB,CAAC,CAAC;IAC1B;IAEA,OAAO,KAAK;EACd;EAEA,SAASpB,kBAAkBA,CAAA,EAAY;IACrC,IAAIvC,KAAK,CAAC4D,KAAK,CAACzD,CAAC,CAAC,EAAE;MAClB0D,kBAAkB,CAAC,CAAC;IACtB,CAAC,MAAM;MACLC,wBAAwB,CAAC,CAAC;IAC5B;IAEA,OAAO,KAAK;EACd;EAEA,SAAS3C,cAAcA,CAAA,EAAY;IACjC,MAAM4C,SAAS,GAAGpB,WAAW,CAAC,CAAC,IAAIqB,gBAAgB,CAAC,CAAC;IACrD,IAAID,SAAS,EAAE;MACbjD,8BAA8B,CAAC,CAAC;MAEhC,IAAIiC,cAAc,CAACtF,SAAS,CAAC,EAAE;QAC7B;QACA,OAAO4C,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACsE,WAAW,CAAC;MACxC;MAEA,MAAM0C,aAAa,GAAGjE,KAAK,CAAC4D,KAAK,CAACzD,CAAC,CAAC;MACpC,IAAIlB,cAAc,CAACe,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC,CAAC,IAAI8D,aAAa,EAAE;QACpD;QACAhE,MAAM,CAACkE,0BAA0B,CAAC,GAAG,CAAC;QACtC,OAAO9D,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACsE,WAAW,CAAC;MACxC;MAEA6C,kBAAkB,CAAC,CAAC;IACtB;IAEA,OAAO,KAAK;EACd;EAEA,SAASzC,gBAAgBA,CAAA,EAAY;IACnC,IAAIoB,cAAc,CAACrF,SAAS,CAAC,EAAE;MAC7B,OAAO2C,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACiE,SAAS,CAAC;IACtC;IAEA,OAAO,KAAK;EACd;EAEA,SAASU,cAAcA,CAAA,EAAY;IACjC,IAAImB,cAAc,CAACxF,gBAAgB,CAAC,EAAE;MACpC,OAAO8C,KAAK,CAACgE,GAAG,CAAC,CAAC;IACpB;IAEA,OAAO,KAAK;EACd;EAEA,SAAS/C,2BAA2BA,CAAA,EAAS;IAC3C;IACA,IAAItB,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC,KAAK,GAAG,EAAE;MAC3BF,MAAM,CAACyD,mBAAmB,CAAC,GAAG,CAAC;MAC/BzD,MAAM,CAACkE,0BAA0B,CAAC,GAAG,CAAC;MACtC,OAAO9D,KAAK,CAACgE,GAAG,CAAC,CAAC;IACpB;;IAEA;IACA,IAAI,CAACrE,KAAK,CAAC4D,KAAK,CAACzD,CAAC,CAAC,IAAIlB,cAAc,CAACe,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC,CAAC,EAAE;MACtDF,MAAM,CAACkE,0BAA0B,CAAC,GAAG,CAAC;MACtC,OAAO9D,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACiE,SAAS,CAAC;IACtC;;IAEA;IACAjB,MAAM,CAACkE,0BAA0B,CAAC,GAAG,CAAC;IACtC,OAAO9D,KAAK,CAACgE,GAAG,CAAC,CAAC;EACpB;EAEA,SAAStC,eAAeA,CAAA,EAAY;IAClC,IAAIgB,cAAc,CAACrF,SAAS,CAAC,EAAE;MAC7B,OAAO2C,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACsE,WAAW,CAAC;IACxC;IAEA,OAAO,KAAK;EACd;EAEA,SAASS,aAAaA,CAAA,EAAY;IAChC,IAAIe,cAAc,CAACvF,kBAAkB,CAAC,EAAE;MACtC,OAAO6C,KAAK,CAACgE,GAAG,CAAC,CAAC;IACpB;IAEA,OAAO,KAAK;EACd;EAEA,SAASpC,uBAAuBA,CAAA,EAAY;IAC1C;IACA,IAAI,CAACjC,KAAK,CAAC4D,KAAK,CAACzD,CAAC,CAAC,IAAIlB,cAAc,CAACe,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC,CAAC,EAAE;MACtDF,MAAM,CAACkE,0BAA0B,CAAC,GAAG,CAAC;MACtC,OAAO9D,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACsE,WAAW,CAAC;IACxC;IAEA,OAAO,KAAK;EACd;EAEA,SAASO,mBAAmBA,CAAA,EAAS;IACnC;IACA7B,MAAM,CAACkE,0BAA0B,CAAC,GAAG,CAAC;IACtC,OAAO9D,KAAK,CAACgE,GAAG,CAAC,CAAC;EACpB;EAEA,SAASlC,oBAAoBA,CAAA,EAAY;IACvC,IAAInC,KAAK,CAAC4D,KAAK,CAACzD,CAAC,CAAC,EAAE;MAClBF,MAAM,CAACS,IAAI,CAAC,KAAK,CAAC;MAClB,OAAOL,KAAK,CAACgE,GAAG,CAAC,CAAC;IACpB,CAAC,MAAM;MACLR,kBAAkB,CAAC,CAAC;MACpB,OAAO,KAAK,EAAC;IACf;EACF;EAEA,SAASxB,oBAAoBA,CAAA,EAAS;IACpC,IAAIgB,aAAa,CAAC/F,oBAAoB,CAAC,EAAE;MACvC+F,aAAa,CAACjF,aAAa,CAAC;IAC9B;IAEA,OAAOiC,KAAK,CAACgE,GAAG,CAAC,CAAC;EACpB;EAEA,SAAS7B,YAAYA,CAAA,EAAY;IAC/B,MAAM8B,WAAW,GAAGvB,cAAc,CAACrF,SAAS,CAAC;IAC7CoD,8BAA8B,CAAC,CAAC;IAEhC,IACE7B,cAAc,CAACe,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC,CAAC,KAC9BF,MAAM,CAACwD,0BAA0B,CAAC,GAAG,CAAC,IAAIxD,MAAM,CAACwD,0BAA0B,CAAC,IAAI,CAAC,CAAC,EACnF;MACA;MACA;MACA,IAAI,CAACa,WAAW,EAAE;QAChB;QACArE,MAAM,CAACkE,0BAA0B,CAAC,GAAG,CAAC;MACxC;MAEAlE,MAAM,CAACsE,OAAO,CAAC,KAAK,CAAC;MAErB,OAAOlE,KAAK,CAACK,IAAI,CAACvD,SAAS,CAAC+E,MAAM,EAAEjF,KAAK,CAACsE,WAAW,CAAC;IACxD;IAEA,IAAI+C,WAAW,EAAE;MACf;MACArE,MAAM,CAACyD,mBAAmB,CAAC,GAAG,CAAC;MAE/B,OAAOrD,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;IACvC;;IAEA;IACA,OAAO1B,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAK5C,gBAAgB,IAAIyC,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAK3C,kBAAkB,EAAE;MAC7F2C,CAAC,EAAE;MACHW,8BAA8B,CAAC,CAAC;IAClC;IAEA,IAAI,CAACd,KAAK,CAAC4D,KAAK,CAACzD,CAAC,CAAC,EAAE;MACnB2D,wBAAwB,CAAC,CAAC;IAC5B;IAEA,OAAO,KAAK;EACd;EAEA,SAAShD,8BAA8BA,CAAA,EAAY;IACjD,MAAM0D,KAAK,GAAGrE,CAAC;IAEf,IAAIsE,OAAO,GAAGC,eAAe,CAAC,CAAC;IAC/B,GAAG;MACDD,OAAO,GAAGE,YAAY,CAAC,CAAC;MACxB,IAAIF,OAAO,EAAE;QACXA,OAAO,GAAGC,eAAe,CAAC,CAAC;MAC7B;IACF,CAAC,QAAQD,OAAO;IAEhB,OAAOtE,CAAC,GAAGqE,KAAK;EAClB;EAEA,SAASE,eAAeA,CAAA,EAAY;IAClC,IAAIE,UAAU,GAAG,EAAE;IACnB,IAAIC,MAAe;IACnB,OACE,CAACA,MAAM,GAAG1F,YAAY,CAACa,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC,KAC3CnB,mBAAmB,CAACgB,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC,EACxC;MACA,IAAI0E,MAAM,EAAE;QACVD,UAAU,IAAI5E,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC;MAC/B,CAAC,MAAM;QACL;QACAyE,UAAU,IAAI,GAAG;MACnB;MAEAzE,CAAC,EAAE;IACL;IAEA,IAAIyE,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;MACzB7E,MAAM,CAACS,IAAI,CAACkE,UAAU,CAAC;MACvB,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEA,SAASD,YAAYA,CAAA,EAAY;IAC/B;IACA,IAAI3E,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAK9B,SAAS,IAAI2B,KAAK,CAACwD,UAAU,CAACrD,CAAC,GAAG,CAAC,CAAC,KAAK/C,YAAY,EAAE;MACjF;MACA,OAAO,CAAC4C,KAAK,CAAC4D,KAAK,CAACzD,CAAC,CAAC,IAAI,CAAC4E,mBAAmB,CAAC5E,CAAC,CAAC,EAAE;QACjDA,CAAC,EAAE;MACL;MACAA,CAAC,IAAI,CAAC;MAEN,OAAO,IAAI;IACb;;IAEA;IACA,IAAIH,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAK9B,SAAS,IAAI2B,KAAK,CAACwD,UAAU,CAACrD,CAAC,GAAG,CAAC,CAAC,KAAK9B,SAAS,EAAE;MAC9E;MACA,OAAO,CAAC2B,KAAK,CAAC4D,KAAK,CAACzD,CAAC,CAAC,IAAIH,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAKpC,WAAW,EAAE;QAC7DoC,CAAC,EAAE;MACL;MAEA,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEA,SAAS4C,cAAcA,CAACiC,IAAY,EAAW;IAC7C,IAAIhF,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAK6E,IAAI,EAAE;MAChC/E,MAAM,CAACS,IAAI,CAACV,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC,CAAC;MAC5BA,CAAC,EAAE;MACH,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEA,SAASkD,aAAaA,CAAC2B,IAAY,EAAW;IAC5C,IAAIhF,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAK6E,IAAI,EAAE;MAChC7E,CAAC,EAAE;MACH,OAAO,IAAI;IACb;IAEA,OAAO,KAAK;EACd;EAEA,SAAS8E,mBAAmBA,CAAA,EAAY;IACtC,OAAO5B,aAAa,CAAChG,aAAa,CAAC;EACrC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASsF,WAAWA,CAAA,EAAmC;IAAA,IAAlCuC,eAAe,GAAAC,SAAA,CAAAL,MAAA,QAAAK,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,KAAK;IAC1C;IACA,MAAME,OAAO,GAAGlF,CAAC;IACjB,MAAMmF,OAAO,GAAGrF,MAAM,CAAC6E,MAAM,CAAC,CAAC;IAE/B,IAAIS,eAAe,GAAGvF,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAK9C,aAAa;IAC3D,IAAIkI,eAAe,EAAE;MACnB;MACApF,CAAC,EAAE;MACHoF,eAAe,GAAG,IAAI;IACxB;IAEA,IAAI1G,OAAO,CAACmB,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC,EAAE;MAChC;MACA;MACA;MACA;MACA,MAAMqF,UAAU,GAAG9G,aAAa,CAACsB,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC,GACjDzB,aAAa,GACbI,aAAa,CAACkB,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC,GAChCrB,aAAa,CAAC;MAAA,EACdC,iBAAiB,CAACiB,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC,CAAC;MAAA,EACrCpB,iBAAiB,CAAC;MAAA,EAClBJ,iBAAiB,EAAC;;MAE1BsB,MAAM,CAACS,IAAI,CAAC,GAAG,CAAC;MAChBP,CAAC,EAAE;MAEH,MAAMsF,aAAa,GAAGP,eAAe,GAChC/E,CAAS,IAAK3B,WAAW,CAACwB,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC,CAAC,GAC1CA,CAAS,IAAKqF,UAAU,CAACxF,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC;MAElD,OAAO,CAACH,KAAK,CAAC4D,KAAK,CAACzD,CAAC,CAAC,IAAI,CAACsF,aAAa,CAACtF,CAAC,CAAC,EAAE;QAC3C,IAAIH,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAK9C,aAAa,EAAE;UACzC,MAAMqI,IAAI,GAAG1F,KAAK,CAACkE,MAAM,CAAC/D,CAAC,GAAG,CAAC,CAAC;UAChC,MAAMwF,UAAU,GAAGtG,gBAAgB,CAACqG,IAAI,CAAC;UACzC,IAAIC,UAAU,KAAKP,SAAS,EAAE;YAC5BnF,MAAM,CAACS,IAAI,CAACV,KAAK,CAACoD,SAAS,CAACjD,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,CAAC;YACtCA,CAAC,IAAI,CAAC;UACR,CAAC,MAAM,IAAIuF,IAAI,KAAK,GAAG,EAAE;YACvB,IAAIE,CAAC,GAAG,CAAC;YACT,OAAOA,CAAC,GAAG,CAAC,IAAIhH,KAAK,CAACoB,KAAK,CAACwD,UAAU,CAACrD,CAAC,GAAGyF,CAAC,CAAC,CAAC,EAAE;cAC9CA,CAAC,EAAE;YACL;YAEA,IAAIA,CAAC,KAAK,CAAC,EAAE;cACX3F,MAAM,CAACS,IAAI,CAACV,KAAK,CAACoD,SAAS,CAACjD,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,CAAC;cACtCA,CAAC,IAAI,CAAC;YACR,CAAC,MAAM,IAAIH,KAAK,CAAC4D,KAAK,CAACzD,CAAC,GAAGyF,CAAC,CAAC,EAAE;cAC7B;cACA;cACAzF,CAAC,IAAIyF,CAAC;YACR,CAAC,MAAM;cACLC,4BAA4B,CAAC,CAAC;YAChC;UACF,CAAC,MAAM;YACL;YACA5F,MAAM,CAACS,IAAI,CAACgF,IAAI,CAAC;YACjBvF,CAAC,IAAI,CAAC;UACR;QACF,CAAC,MAAM;UACL,MAAMuF,IAAI,GAAG1F,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC;UAC5B,MAAM6E,IAAI,GAAGU,IAAI,CAAClC,UAAU,CAAC,CAAC,CAAC;UAE/B,IAAIwB,IAAI,KAAKpH,eAAe,IAAIoC,KAAK,CAACwD,UAAU,CAACrD,CAAC,GAAG,CAAC,CAAC,KAAK9C,aAAa,EAAE;YACzE;YACA4C,MAAM,CAACS,IAAI,CAAC,IAAI,GAAGgF,IAAI,CAAC;YACxBvF,CAAC,EAAE;UACL,CAAC,MAAM,IAAI5B,kBAAkB,CAACyG,IAAI,CAAC,EAAE;YACnC;YACA/E,MAAM,CAACS,IAAI,CAACtB,iBAAiB,CAACsG,IAAI,CAAC,CAAC;YACpCvF,CAAC,EAAE;UACL,CAAC,MAAM;YACL,IAAI,CAACjB,sBAAsB,CAAC8F,IAAI,CAAC,EAAE;cACjCc,qBAAqB,CAACJ,IAAI,CAAC;YAC7B;YACAzF,MAAM,CAACS,IAAI,CAACgF,IAAI,CAAC;YACjBvF,CAAC,EAAE;UACL;QACF;QAEA,IAAIoF,eAAe,EAAE;UACnB;UACAN,mBAAmB,CAAC,CAAC;QACvB;MACF;MAEA,MAAMc,WAAW,GAAGlH,OAAO,CAACmB,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC;MAChD,IAAI4F,WAAW,EAAE;QACf9F,MAAM,CAACS,IAAI,CAAC,GAAG,CAAC;QAChBP,CAAC,EAAE;MACL,CAAC,MAAM;QACL;QACAF,MAAM,CAACkE,0BAA0B,CAAC,GAAG,CAAC;MACxC;MAEArD,8BAA8B,CAAC,CAAC;;MAEhC;MACA;MACA;MACA;MACA;MACA,MAAMkF,OAAO,GAAGhG,KAAK,CAAC4D,KAAK,CAACzD,CAAC,CAAC;MAC9B,MAAM8F,eAAe,GAAGzH,WAAW,CAACwB,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC,CAAC;MACpD,IACE,CAAC+E,eAAe,KACda,WAAW,IAAI,CAACC,OAAO,IAAI,CAACC,eAAe,IAAM,CAACF,WAAW,IAAIC,OAAQ,CAAC,EAC5E;QACA7F,CAAC,GAAGkF,OAAO;QACXpF,MAAM,CAACiG,MAAM,CAACZ,OAAO,CAAC;QACtB,OAAO3C,WAAW,CAAC,IAAI,CAAC;MAC1B;MAEAwD,uBAAuB,CAAC,CAAC;MAEzB,OAAO9F,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;IACvC;IAEA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;EACE,SAASyE,uBAAuBA,CAAA,EAAY;IAC1C,IAAIC,MAAM,GAAG,KAAK;IAElBtF,8BAA8B,CAAC,CAAC;IAChC,OAAOd,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAKhC,QAAQ,EAAE;MACvCiI,MAAM,GAAG,IAAI;MACbjG,CAAC,EAAE;MACHW,8BAA8B,CAAC,CAAC;;MAEhC;MACAb,MAAM,CAACyD,mBAAmB,CAAC,GAAG,EAAE,IAAI,CAAC;MACrC,MAAMc,KAAK,GAAGvE,MAAM,CAAC6E,MAAM,CAAC,CAAC;MAC7B,MAAMuB,SAAS,GAAG1D,WAAW,CAAC,CAAC;MAC/B,IAAI0D,SAAS,EAAE;QACb;QACApG,MAAM,CAACiG,MAAM,CAAC1B,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC;MACjC,CAAC,MAAM;QACL;QACAvE,MAAM,CAACkE,0BAA0B,CAAC,GAAG,CAAC;MACxC;IACF;IAEA,OAAOiC,MAAM;EACf;;EAEA;AACF;AACA;EACE,SAASxD,WAAWA,CAAA,EAAY;IAC9B,MAAM4B,KAAK,GAAGrE,CAAC;IACf,IAAIH,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAKrC,SAAS,EAAE;MACrCqC,CAAC,EAAE;MACH,IAAImG,mBAAmB,CAAC9B,KAAK,CAAC,EAAE;QAC9B,OAAOnE,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;MACvC;IACF;;IAEA;IACA;IACA;IACA;IACA,OAAOjD,OAAO,CAACuB,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC,EAAE;MACnCA,CAAC,EAAE;IACL;IAEA,IAAIH,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAKxC,OAAO,EAAE;MACnCwC,CAAC,EAAE;MACH,IAAImG,mBAAmB,CAAC9B,KAAK,CAAC,EAAE;QAC9B,OAAOnE,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;MACvC;MACA,OAAOjD,OAAO,CAACuB,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC,EAAE;QACnCA,CAAC,EAAE;MACL;IACF;IAEA,IAAIH,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAKtC,cAAc,IAAImC,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAK7B,cAAc,EAAE;MACpF6B,CAAC,EAAE;MACH,IAAIH,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAKrC,SAAS,IAAIkC,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAKhC,QAAQ,EAAE;QACzEgC,CAAC,EAAE;MACL;MACA,IAAImG,mBAAmB,CAAC9B,KAAK,CAAC,EAAE;QAC9B,OAAOnE,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;MACvC;MACA,OAAOjD,OAAO,CAACuB,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC,EAAE;QACnCA,CAAC,EAAE;MACL;IACF;IAEA,IAAIA,CAAC,GAAGqE,KAAK,EAAE;MACb;MACA,MAAM+B,GAAG,GAAGvG,KAAK,CAACoD,SAAS,CAACoB,KAAK,EAAErE,CAAC,CAAC;MACrC,MAAMqG,qBAAqB,GAAG,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC;MAE9CtG,MAAM,CAACS,IAAI,CAAC8F,qBAAqB,QAAAE,MAAA,CAAOH,GAAG,UAAMA,GAAG,CAAC;MACrD,OAAOlG,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;IACvC;IAEA,OAAO,KAAK;EACd;;EAEA;AACF;AACA;AACA;EACE,SAASmB,aAAaA,CAAA,EAAY;IAChC,OACE8D,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,IAC5BA,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,IAC9BA,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;IAC5B;IACAA,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,IAC5BA,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,IAC9BA,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;EAEhC;EAEA,SAASA,YAAYA,CAACC,IAAY,EAAEC,KAAa,EAAW;IAC1D,IAAI7G,KAAK,CAACoD,SAAS,CAACjD,CAAC,EAAEA,CAAC,GAAGyG,IAAI,CAAC9B,MAAM,CAAC,KAAK8B,IAAI,EAAE;MAChD3G,MAAM,CAACS,IAAI,CAACmG,KAAK,CAAC;MAClB1G,CAAC,IAAIyG,IAAI,CAAC9B,MAAM;MAChB,OAAOzE,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC;IACvC;IAEA,OAAO,KAAK;EACd;EAEA,SAASsC,gBAAgBA,CAAA,EAAY;IACnC,IAAI8C,GAAG,GAAG5D,iBAAiB,CAAC,CAAC;IAE7B,IAAI4D,GAAG,KAAK,IAAI,EAAE;MAChB;MACA,OAAO3H,YAAY,CAACa,KAAK,CAACwD,UAAU,CAACsD,GAAG,GAAG,CAAC,CAAC,CAAC,IAAIA,GAAG,GAAG3G,CAAC,EAAE;QACzD2G,GAAG,EAAE;MACP;MAEA,MAAM3D,MAAM,GAAGnD,KAAK,CAACoD,SAAS,CAACjD,CAAC,EAAE2G,GAAG,CAAC;MACtC7G,MAAM,CAACS,IAAI,CAAC4C,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC,CAAC;MACnChD,CAAC,GAAG2G,GAAG;MAEP,IAAI9G,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,KAAKvC,eAAe,EAAE;QAC3C;QACAuC,CAAC,EAAE;MACL;MAEA,OAAOE,KAAK,CAAC2C,MAAM,CAAC/F,KAAK,CAACyE,UAAU,CAAC,EAAC;IACxC;IAEA,OAAO,KAAK;EACd;EAEA,SAASwB,iBAAiBA,CAAA,EAAkB;IAC1C;IACA,IAAI0C,CAAC,GAAGzF,CAAC;IACT,OAAO,CAACH,KAAK,CAAC4D,KAAK,CAACgC,CAAC,CAAC,IAAI,CAACpH,WAAW,CAACwB,KAAK,CAACkE,MAAM,CAAC0B,CAAC,CAAC,CAAC,EAAE;MACvDA,CAAC,EAAE;IACL;IAEA,OAAOA,CAAC,GAAGzF,CAAC,GAAGyF,CAAC,GAAG,IAAI;EACzB;EAEA,SAASmB,WAAWA,CAACvC,KAAa,EAAE;IAClC,IAAI,CAAC/F,OAAO,CAACuB,KAAK,CAACwD,UAAU,CAACrD,CAAC,CAAC,CAAC,EAAE;MACjC,MAAM6G,QAAQ,GAAGhH,KAAK,CAACoD,SAAS,CAACoB,KAAK,EAAErE,CAAC,CAAC;MAC1C,MAAM,IAAInD,eAAe,oBAAA0J,MAAA,CAAoBM,QAAQ,2BAAAN,MAAA,CAAwBO,GAAG,CAAC,CAAC,GAAI9G,CAAC,CAAC;IAC1F;EACF;EAEA,SAASmG,mBAAmBA,CAAC9B,KAAa,EAAE;IAC1C,IAAIxE,KAAK,CAAC4D,KAAK,CAACzD,CAAC,CAAC,EAAE;MAClB;MACA;MACA;MACAF,MAAM,CAACS,IAAI,CAACV,KAAK,CAACoD,SAAS,CAACoB,KAAK,EAAErE,CAAC,CAAC,GAAG,GAAG,CAAC;MAC5C,OAAO,IAAI;IACb,CAAC,MAAM;MACL4G,WAAW,CAACvC,KAAK,CAAC;MAClB,OAAO,KAAK;IACd;EACF;EAEA,SAASsB,qBAAqBA,CAACJ,IAAY,EAAE;IAC3C,MAAM,IAAI1I,eAAe,CAAC,oBAAoB,GAAGsG,IAAI,CAACC,SAAS,CAACmC,IAAI,CAAC,EAAEvF,CAAC,CAAC;EAC3E;EAEA,SAAS2D,wBAAwBA,CAAA,EAAG;IAClC,MAAM,IAAI9G,eAAe,CAAC,uBAAuB,GAAGsG,IAAI,CAACC,SAAS,CAACvD,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC,CAAC,EAAEA,CAAC,CAAC;EACzF;EAEA,SAAS0D,kBAAkBA,CAAA,EAAG;IAC5B,MAAM,IAAI7G,eAAe,CAAC,+BAA+B,EAAEmD,CAAC,CAAC;EAC/D;EAEA,SAASwD,sBAAsBA,CAAA,EAAG;IAChC,MAAM,IAAI3G,eAAe,CAAC,qBAAqB,EAAEmD,CAAC,CAAC;EACrD;EAEA,SAASiE,kBAAkBA,CAAA,EAAG;IAC5B,MAAM,IAAIpH,eAAe,CAAC,gBAAgB,EAAEmD,CAAC,CAAC;EAChD;EAEA,SAAS0F,4BAA4BA,CAAA,EAAG;IACtC,MAAMqB,KAAK,GAAGlH,KAAK,CAACoD,SAAS,CAACjD,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC;IACvC,MAAM,IAAInD,eAAe,gCAAA0J,MAAA,CAA+BQ,KAAK,SAAK/G,CAAC,CAAC;EACtE;EAEA,SAAS8G,GAAGA,CAAA,EAAW;IACrB,MAAMvB,IAAI,GAAG1F,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC;IAC5B,OAAOuF,IAAI,eAAAgB,MAAA,CAAehB,IAAI,SAAM,0BAA0B;EAChE;EAEA,SAASX,mBAAmBA,CAAC5E,CAAS,EAAE;IACtC,OAAOH,KAAK,CAACkE,MAAM,CAAC/D,CAAC,CAAC,KAAK,GAAG,IAAIH,KAAK,CAACkE,MAAM,CAAC/D,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG;EAC/D;EAEA,OAAO;IACLK,SAAS;IACTD;EACF,CAAC;AACH"}